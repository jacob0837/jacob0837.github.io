
连接数据库:
    例(直接连数据库):
    from django.shortcuts import render_to_response
    import MySQLdb as dbDraver # 没安装相关的数据库驱动会报错

    def book_list(request):
        db = dbDraver.connect(user='me', db='mydb', passwd='secret', host='localhost')
        cursor = db.cursor()
        cursor.execute('SELECT name FROM books ORDER BY name')
        names = [row[0] for row in cursor.fetchall()]
        db.close()
        return render_to_response('book_list.html', {'names': names})


    数据库配置在Django配置文件里面，默认是settings.py, 配置内容:

    DATABASE_ENGINE = ''      # 使用哪个数据库引擎
    DATABASE_NAME = ''        # 数据库名字; 如果你使用SQLite，指出数据库文件的完整的文件系统路径，如'/home/django/mydata.db'
    DATABASE_USER = ''        # 连接数据库的用户名; 如果你使用SQLite，这项为空
    DATABASE_PASSWORD = ''    # 连接数据库的密码; 如果你使用SQLite或者你的密码为空，则这项为空
    DATABASE_HOST = ''        # 连接数据库的主机; 如果数据库和Django安装在同一台计算机上，则这项为空; 如果你使用SQLite，这项为空
    DATABASE_PORT = ''        # 连接数据库的端口，如果你使用SQLite，则这项为空

    1，DATABASE_ENGINE: 使用哪个数据库引擎，必须是下面的字符串集合：

        设置                             数据库                                                    需要的适配器
        postgresql           PostgreSQL psycopg version 1.x,                                      http://initd.org/projects/psycopg1
        postgresql_psycopg2  PostgreSQL psycopg version 2.x,                                      http://initd.org/projects/psycopg2
        mysql                MySQL MySQLdb,                                                       http://sourceforge.net/projects/mysql-python
        sqlite3              SQLite No adapter needed if using Python 2.5+ Otherwise, pysqlite,   http://initd.org/tracker/pysqlite
        ado_mssql            Microsoft SQL Server adodbapi version 2.0.1+,                        http://adodbapi.sourceforge.net/
        oracle               Oracle cx_Oracle,                                                    http://www.python.net/crew/atuining/cx_Oracle/

    2, DATABASE_HOST: 连接数据库的主机，MySQL在这里很特殊，如果这项的值以'/'开头并且你使用MySQL，MySQL会通过Unix socket连接特殊的socket
       例如DATABASE_HOST ＝ '/var/run/mysql/'; 如果你使用MySQL但这项的值不是以'/'开头，那么这项的值就假设为所连接的主机




数据库操作
    1) 可在 Django 项目的 settings.py 里面写数据库配置信息，以便调用(不用独立出来写)

        # Django 1.0 时的写法是：
        DATABASE_ENGINE = 'oracle' # 数据库类型：'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        DATABASE_NAME = 'orcl'  # 数据库名, 或者是sqlite3数据库文件的路径
        DATABASE_USER = 'NEWSPBC' # 用户名, sqlite3不需用
        DATABASE_PASSWORD = 'dgxytspbc' # 密码, sqlite3不需用
        DATABASE_HOST = '172.16.2.20' # IP地址，为空则认为是localhost; sqlite3不需用
        DATABASE_PORT = '1521'  # 端口，为空则使用默认的; sqlite3不需用

        # Django 1.2.5 时的写法是：
        DATABASES = {
            'default': {
                'ENGINE': 'oracle',  # 数据库类型：'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
                'NAME': 'g315',      # 数据库名, 或者是sqlite3数据库文件的路径
                'USER': 'maomingtest', # 用户名, sqlite3不需用
                'PASSWORD': 'maomingtest', # 密码, sqlite3不需用
                'HOST': '192.168.1.240',  # IP地址，为空则认为是localhost; sqlite3不需用
                'PORT': '1521',  # 端口，为空则使用默认的; sqlite3不需用
            }
        }

    2)  常见的错误信息                                                    问题所在
        You haven’t set the DATABASE_ENGINE setting yet.            # DATABASE_ENGINE 不能为空
        Environment variable DJANGO_SETTINGS_MODULE is undefined.    # 需运行 python manage.py shell而不是python
        Error loading __ module: No module named __.                 # 还没有安装数据库相关的适配器(如psycopg或MySQLdb)
        __ isn’t an available database backend.                     # DATABASE_ENGINE 不是合法的数据库引擎，拼写错误
        database __ does not exist                                   # DATABASE_NAME 指向一个不存在的数据库
        role __ does not exist                                       # DATABASE_USER 指向一个不存在的user
        could not connect to server              # DATABASE_HOST 或者 DATABASE_PORT 设置不正确，也可能数据库没运行

    3) 建立app
        project和app的区别(区别就是配置和代码)：
        1，一个project是许多Django app的集合的实例，加上那些app的的配置
           一个project唯一的前提是它提供一个settings文件，里面定义了数据库连接信息，安装的app，TEMPLATE_DIRS等等
        2，一个app是Django的可移动功能集，通常包括模型和视图，存在于一个单独的Python包里面
           关键要注意的是它们是可移动并且可以在不同的project重用
           有一点需要重视app惯例，如果你使用Django的数据库层(模型)，你必须创建Django app(模型必须存在于app)
        3，在前面创建的mysite目录下面，运行下面的命令来创建一个新的app：
           python manage.py startapp app名称

    4) 建立模型
        一个模型通常域一个数据库表对应，而每个属性和数据库表的一列对应
        属性名对应列名，属性的类型(如CharField)对应数据库列类型
        Django自己可以生成SQL语句(如 create table 等等)
        如果表是多对多关系，但是数据表并没有多对多对应的列；Django会创建一个附加的多对多连接表来处理映射关系
        除非你自己定义一个主键，Django会自动为每个模型生成一个integer主键域id(模型中不需要定义主键，他会隐式创建)
        每个Django模型都必须有一个单列的主键

        # 在上一步用 startapp 命令创建的 models.py 中输入下面的内容：
        from django.db import models

        class Publisher(models.Model):
            name = models.CharField('出版社名称', max_length=30) # 字符串类型，定义长度30；第一个字符串参数是字段说明
            address = models.CharField(max_length=50)
            total = models.IntegerField('总量', default=0, blank=True) # 数值类型
            salutation = models.CharField(max_length=10, blank=True, null=True) # 允许为空值(默认是 not null)；默认为空值
            publication_date = models.DateField()  # 日期类型(date)
            website = models.URLField() # URL 类型(字符串保存，200位)
            file_path = models.FilePathField('新闻文件路径') # 文件路径,路径符号会被自动转换
            email = models.EmailField() # email 类型(字符串 保存，75位)
            headshot = models.ImageField(upload_to='/tmp') # 图片类型,定义上传路径（字符串保存，100位）
            # 图片类型需安装模块，地址： http://www.pythonware.com/products/pil/   可以导入“import ImageFile”才算成功

        class Author(models.Model):
            code = models.CharField('作者编号', max_length=20, primary_key=True) # 显式定义主键,字符串类型
            name = models.CharField(max_length=30)

        # 指定可选的值(下面的 confirm_status 字段使用)
        CONFIRM_STATUS = ( ('待审核','待审核'), ('已通过','已通过'), ('未通过','未通过'), )
        class Book(models.Model):
            no = models.AutoField('书编号', primary_key=True) # 显式定义主键,自增长类型(整数类型)
            title = models.CharField(max_length=100)
            publish_time = models.DateTimeField('发布时间', auto_now_add = True) # 时间类型(datetime)，会自动赋值为当前时间
            confirm_note = models.CharField('审核意见', max_length=100, blank=True, null=True) # 设定允许为空
            # 指定固定值，并设置预设值
            confirm_status = models.CharField('审核状态',max_length=10, choices=CONFIRM_STATUS, default='待审核')
            full_content_path = models.FilePathField('封面文件路径') # 文件路径类型(字符串保存，100位)
            full_content = models.TextField('全部内容') # text 类型
            authors = models.ManyToManyField(Author) # 对应一个或多个authors(many-to-many)；会创建关联表来维护
            publisher = models.ForeignKey(Publisher) # 对应一个单独的publisher(one-to-many)；会创建外键来维护
            # 以下是一一对应关系的写法，第一个参数是关联的对象， verbose_name 是说明
            # place = models.OneToOneField(Place, verbose_name="related place")


    5) 安装模型

       编辑首目录的 settings.py, 查找 INSTALLED_APPS 设置
        # 每个 app 都用完整的 Python PATH 来表示，即包的PATH，用小数点分隔来指向app包
        INSTALLED_APPS = (
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.sites',
            'mysite.books',                # 自定义的模型
        ) # 别忘了最后的逗号

        验证模型： python manage.py validate
        validate命令检查我们的模型语法和逻辑正确与否
        如果一切正常，我们会看到0 errors found的信息；否则，error输出会给你有用的信息来帮你找到错误的代码
        任何时候你认为你的模型代码有问题都可以运行python manage.py validate来捕捉模型错误

        生成CREATE TABLE语句：  python manage.py sqlall app名称
        运行完命令，你将会看到建表语句
        sqlall命令事实上并没有接触数据库或建表，它仅仅将输出打印到屏幕上

    6) 把模型同步到数据库
       python manage.py syncdb
       它检查数据库和你的INSTALLED_APPS中的所有app的所有模型，看看是否有些表已经存在，如果表不存在就创建表
       注意syncdb不会同步改动或删除了的模型，如果你改动或删除了一个模型，syncdb不会更新数据库

    7) 操作数据库
       # 执行命令
       python manage.py shell  # 先进入django的shell，以加载设置后再运行

       ####################### 执行python ######################
       from books.models import Publisher,Book # import模型类

       # 新增、保存
       p = Publisher(name='Apress', address='2560 Ninth St.', website='http://www.apress.com/') # 创建模型类对象,并赋值
       p.save() # 将一个对象保存到数据库，后台Django在这里执行了一条 INSERT SQL语句
       p = Publisher(name="O'Reilly", address='10', website='http://www.oreilly.com/')
       p.save()
       Joe = Publisher.objects.create(name="Joe", address='10 N') # 直接保存到数据库，并返回这个对象
       book = Book.objects.get(title="ddkk")
       book.publisher.add(Joe) # 添加关联类(调用它的 add 函数)

       # 更新
       publisher = Publisher.objects.get(id=1) # 这只获取到一个对象
       publisher.name = 'test_name'
       publisher.save() # 执行更新语句
       Publisher.objects.filter(name='Joe').update(city='haha..') # 执行条件更新(更新多行)；返回更新的行数
       Publisher.objects.select_related().filter(name='www').update(city='haha..') # select_related 函数会查询所有
       Publisher.objects.update(city='kk.') # 没有条件，则整表更新

       # 删除
       publisher = Publisher.objects.get(id=1)
       publisher.delete() # 执行删除语句,没返回值
       Publisher.objects.filter(name='Joe').delete()  # 执行条件删除语句(会删除多行)

       # 查询
       # 使用 模型类.objects 属性从数据库得到对象，使用 模型类.objects.all() 得到 模型类 的所有的对象列表
       publisher_list = Publisher.objects.all() # 后台Django在这里执行了一条 SELECT SQL语句；找出所有
       print(publisher_list) # 打印：[<Publisher: Publisher object>, <Publisher: Publisher object>]
       print(publisher_list[0].name) # 使用对象的某个值，打印：Apress
       # order_by 函数排序查询(负号表示倒序)； values 函数只查询指定字段(返回一个列表,列表里面各行数据是一个字典)
       p_list = Publisher.objects.all().order_by('-publication_date').values('name', 'address', 'email')
       p_list = Publisher.objects.order_by('name') # 直接排序，返回跟all函数一样的结果，只是有排序
       # 按条件查询, 查不到时会报错
       publisher_list = Publisher.objects.get(name="Apress")
       publisher_list = Publisher.objects.get(name="Apress", address='2560 N') # 多条件查询(各条件是 and 关系)
       # 过滤出等于或不等于此值的内容，找不到返回空列表，不报错
       Publisher.objects.filter(name='Joe').exclude(address='10 N').filter(email='tt') # filter 函数找出等于此值的；exclude 函数找出不等于此值的
       Publisher.objects.filter(name='Joe', email='tt') # filter 函数的多条件查询, and 关系
       # limit 查询(注：调用all语句前不会立即执行,故不用担心消耗过大)
       publisher_list = Publisher.objects.all()[:10] # 找出前10条记录
       publisher_list = Publisher.objects.all()[5:10] # 找出第5到第10条记录
       publisher_list = Publisher.objects.all()[5] # 找出第5条记录
       publisher_list = Publisher.objects.all()[:10:3] # 找出前10条记录中的每3条记录取1条(即是取第1,4,7,10条记录)
       publisher_list = Publisher.objects.all()[-5] # 报错，不支持此用法
       publisher = Publisher.objects.all()[0:1].get() # 只有一条记录时，可以用 get 函数来取
       # 查询总数
       count = Publisher.objects.all().count()
       # 比较条件(在字段名后面加上比较的后缀,两个下划线做连接)
       publisher_list = Publisher.objects.filter(name__lte='Joe') # 查找 name <= 'Joe' 的内容
       publisher = Publisher.objects.get(name__exact='Joe')  # 用 get 函数也可以查找，只是要求结果是一个的，不然报错；多了或者少了都报错
       publisher_list = Publisher.objects.filter(name__isnull=True)  # 查找 name 为空的内容
       publisher_list = Publisher.objects.filter(name__contains='joe') # like 查询(特殊符号会被自动转义，如“%”转成“\%”)
       publisher_list = Publisher.objects.exclude(id__in=[1,3,4]) # in 查询, 找出 id not in( 1, 3, 4 ) 的
       # __lt  <  (小于)      __lte <= (小于等于)
       # __gt  <  (大于)      __gte <= (大于等于)
       # __exact  (等于)      __iexact (忽略大小写的等于)
       # __contains (like)    __icontains (忽略大小写的 like )
       # __isnull = True      __isnull = False  (是否为空)
       # __in (in 列表)
       # __startswith (开始于,相当于 like 'value%' )   __istartswith (忽略大小写的 )
       # __endswith (结尾于,相当于 like '%value' )     __iendswith (忽略大小写的 )

       # 多表的条件查询
       book_list = Book.objects.filter(publisher__name="Joe") # 多表查询, 查询 book表的 publisher 关联表的 name 字段
       book_list = Book.objects.filter(publisher__name__isnull=False) # 多表查询的条件查询，条件拼接跟前面一样

       # 原生SQL查询,使用： Manager.raw(raw_query, params=None, translations=None)
       for p in Publisher.objects.raw('SELECT * FROM books_publisher'): print(p) # 直接使用原生SQL

       # F 模型(各字段之间的比较)
       from django.db.models import F
       publisher_list = Publisher.objects.filter(name__gte=F('address')) # 两字段比较： select ... where name >= address
       publisher_list = Publisher.objects.filter(name=F('address')*3)  # 可以加减乘除，只是不知道怎么用
       publisher_list = Publisher.objects.filter(name=F('address')+F('address')-F('id'))

       # Q 模型(多条件查询)
       from django.db.models import Q
       Publisher.objects.filter(Q(name__startswith='d')) # 语句如： select ... where name like 'd%'
       Publisher.objects.filter(Q(name='dd') | Q(name__in=['joe','www'])) # or 用法，语句如： select ... where name='dd' or name in ('joe','www')
       Publisher.objects.filter(Q(id__gt=8), Q(name='dd') | Q(name__in=['joe','www'])) # and 和 or 合用： where id>8 and name='dd' or name in ('joe','www')


    8) 添加模型的string显示
        上面的例子中，当我们打印publishers列表时我们得到的都是一些无用的信息，我们很难将Publisher对象区别开：
        [<Publisher: Publisher object>, <Publisher: Publisher object>]
        我们可以通过给Publisher对象添加一个 __str__() 方法来轻松解决这个问题
        __str__()唯一的条件是返回一个string，如果不返回 string 的话如返回一个 integer ,会触发一个TypeError异常
        __str__()方法告诉Python怎样显示对象的string显示：

        # 修改前面的 Author 类
        class Author(models.Model):
            name = models.CharField(max_length=30)
            salutation = models.CharField(max_length=10)

            def __str__(self):
                return self.name

       # 执行命令
       python manage.py shell

       # 执行python
       from books.models import Author # import模型类
       a = Author(name='Jhon', salutation='salutation1')
       a.save()
       a = Author(name='Kevin', salutation='salutation2')
       a.save()
       author_list = Author.objects.all()
       print(author_list) # 打印：[<Author: Jhon>, <Author: Kevin>]
       print(author_list[0].name) # 打印： Jhon

    注意__str__()是给模型添加行为的好习惯
    一个Django模型描述的不仅仅是一个对象数据库表结构，它也描述了对象知道怎样去做的功能


分页
    可使用 django 内置的分页

    # 导入分页工具
    from django.core.paginator import Paginator

    objects = ['john', 'paul', 'george', 'ringo', 'vincent', 'jecheck', 'dennis', 'lynn', 'lili', 'andy'] # 模拟数据库查询出的数据

    # 参数: 第一个就是数据的集合，第二个表示每页放几笔数据。 allow_empty_first_page 查询时是否允许为空,(默认值 False,为空时报错)
    # 第一个参数可以是list，tuple，QuerySet 或者任意对象——只要它有 count() 或者 __len__() 函数。 Django会先尝试调用 count()。如果 不可行，再调用 len() 。
    p = Paginator(objects, 3, allow_empty_first_page=True)
    print(p.count)  # 共多少笔资料，打印: 10
    print(p.num_pages) # 共多少页,打印： 3
    print(p.page_range) # 分页条的列表,打印： [1,2,3,4]

    page1 = p.page(1) # 取第一页，里面的数字是第几页
    print(page1) # 对象，打印： <Page 1 of 4>
    print(page1.object_list) # 所取页面的集合,打印: ['john', 'paul', 'george']

    page2 = p.page(2) # 取第二页
    print(page2.has_next()) # 是否有下一页,结果是bool类型,打印: True
    print(page2.has_previous()) # 是否有上一页,结果是bool类型,打印: True
    print(page2.has_other_pages()) # 是否有其他页面,结果是bool类型,打印: True
    print(page2.next_page_number()) # 下一页的页码,打印: 3
    print(page2.previous_page_number()) # 上一页的页码,打印: 1
    print(page1.previous_page_number()) # 上一页的页码,第一页时,打印: 0

    print(page1.start_index()) # 这页面的开始行数(从1开始),打印: 1
    print(page2.start_index()) # 这页面的开始行数(从1开始),打印: 4
    print(page2.end_index()) # 这页面的结束行数,打印: 6

    p.page(0) # 报错:  EmptyPage: That page number is less than 1
    p.page(5) # 报错:  EmptyPage: That page contains no results

